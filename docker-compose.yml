services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    restart: always
    networks:
      - hiver-net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    restart: always
    networks:
      - hiver-net
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    depends_on:
      - zookeeper

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: always
    networks:
      - hiver-net
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: hiver
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  users:
    container_name: users
    build:
      context: .
      args:
        - APP=users
    restart: always
    networks:
      - hiver-net
    env_file:
      - .env
    environment:
      USERS_SERVICE_HOST: 0.0.0.0
      PORT: 3000
      DATABASE_URL: postgresql://postgres:password@postgres:5432/hiver
      KAFKA_BROKER: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started

  kong-dbless:
    image: kong:latest
    container_name: kong
    restart: unless-stopped
    networks:
      - hiver-net
    volumes:
      - ./declarative:/kong/declarative/:ro
    tmpfs:
      - /kong/run
    environment:
      KONG_PREFIX: /kong/run
      KONG_DATABASE: off
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    depends_on: #add more microservices in the future when created
      - users

networks:
  hiver-net:
    name: hiver-net

volumes:
  postgres-data:
